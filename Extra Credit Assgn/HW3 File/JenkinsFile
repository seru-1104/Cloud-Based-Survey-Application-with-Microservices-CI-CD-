pipeline {
    agent any
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('Docker_Cred')  // Docker Hub credentials ID
        KUBECONFIG = credentials('Kube_Config')             // Kubernetes config file credential ID
        dockerImage = ''                                    // Placeholder for the Docker image name with tag
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Check out the code from the GitHub repository
                    checkout scm: [
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            credentialsId: 'GitHub_Cred',   // GitHub credentials ID
                            url: 'https://github.com/keerthana-248/SWE-HW3'
                        ]]
                    ]
                }
            }
        }
        stage('Build Spring Boot Application') {
            steps {
                script {
                    // Build the Spring Boot application using Maven
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Define the Docker image with the build number as the tag with .0 suffix
                    dockerImage = "keerthana762docker/surveyproject:${BUILD_NUMBER}.0"
                    // Build the Docker image
                    sh "docker build -t ${dockerImage} ."
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub and push the Docker image
                    sh "docker login -u ${DOCKER_HUB_CREDENTIALS_USR} -p ${DOCKER_HUB_CREDENTIALS_PSW}"
                    sh "docker push ${dockerImage}"
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Use the build number as the tag with .0 suffix in the deployment file
                    def tag = "${BUILD_NUMBER}.0"
                    // Replace the placeholder in the deployment.yaml with the actual tag
                    sh "sed -i 's|{{IMAGE_TAG}}|${tag}|g' deployment.yaml"
                    // Deploy to Kubernetes using the kubeconfig credentials
                    withCredentials([file(credentialsId: 'Kube_Config', variable: 'KUBECONFIG')]) {
                        // Set KUBECONFIG explicitly to the credentials file path
                        sh 'export KUBECONFIG=$KUBECONFIG && kubectl apply -f deployment.yaml'
                        sh 'export KUBECONFIG=$KUBECONFIG && kubectl apply -f service.yaml'
                    }
                }
            }
        }
    }
    post {
        always {
            // Clean up Docker images to free up space
            sh "docker rmi ${dockerImage} || true"
            // Clean up Maven artifacts
            cleanWs()
        }
    }
}